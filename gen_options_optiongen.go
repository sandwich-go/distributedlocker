// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package distributedlocker

import "time"

// Options should use NewOptions to initialize it
type Options struct {
	RetryTimes       int           `usage:"acquire lock重试次数"`
	MinRetryInterval time.Duration `usage:"最小重试时间，不能小于50ms"`
	MaxRetryInterval time.Duration `usage:"最大重试时间，不能大于250ms"`
	DriftFactor      float64       `usage:"有效时间因子"`
	TimeoutFactor    float64       `usage:"超时时间因子"`
	Expiration       time.Duration `usage:"过期时间"`
	Prefix           string        `usage:"key的前缀"`
	AutoRenew        bool          `usage:"是否自动续期"`
}

// NewOptions new Options
func NewOptions(opts ...Option) *Options {
	cc := newDefaultOptions()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

// ApplyOption apply multiple new option
func (cc *Options) ApplyOption(opts ...Option) {
	for _, opt := range opts {
		opt(cc)
	}
}

// Option option func
type Option func(cc *Options)

// WithRetryTimes  acquire lock重试次数
func WithRetryTimes(v int) Option {
	return func(cc *Options) {
		cc.RetryTimes = v
	}
}

// WithMinRetryInterval 最小重试时间，不能小于50ms
func WithMinRetryInterval(v time.Duration) Option {
	return func(cc *Options) {
		cc.MinRetryInterval = v
	}
}

// WithMaxRetryInterval 最大重试时间，不能大于250ms
func WithMaxRetryInterval(v time.Duration) Option {
	return func(cc *Options) {
		cc.MaxRetryInterval = v
	}
}

// WithDriftFactor 有效时间因子
func WithDriftFactor(v float64) Option {
	return func(cc *Options) {
		cc.DriftFactor = v
	}
}

// WithTimeoutFactor 超时时间因子
func WithTimeoutFactor(v float64) Option {
	return func(cc *Options) {
		cc.TimeoutFactor = v
	}
}

// WithExpiration 过期时间
func WithExpiration(v time.Duration) Option {
	return func(cc *Options) {
		cc.Expiration = v
	}
}

// WithPrefix key的前缀
func WithPrefix(v string) Option {
	return func(cc *Options) {
		cc.Prefix = v
	}
}

// WithAutoRenew 是否自动续期
func WithAutoRenew(v bool) Option {
	return func(cc *Options) {
		cc.AutoRenew = v
	}
}

// InstallOptionsWatchDog the installed func will called when NewOptions  called
func InstallOptionsWatchDog(dog func(cc *Options)) { watchDogOptions = dog }

// watchDogOptions global watch dog
var watchDogOptions func(cc *Options)

// newDefaultOptions new default Options
func newDefaultOptions() *Options {
	cc := &Options{}

	for _, opt := range [...]Option{
		WithRetryTimes(32),
		WithMinRetryInterval(minRetryInterval),
		WithMaxRetryInterval(maxRetryInterval),
		WithDriftFactor(0.01),
		WithTimeoutFactor(0.05),
		WithExpiration(minExpiration),
		WithPrefix("__mx__"),
		WithAutoRenew(true),
	} {
		opt(cc)
	}

	return cc
}

// all getter func
func (cc *Options) GetRetryTimes() int                 { return cc.RetryTimes }
func (cc *Options) GetMinRetryInterval() time.Duration { return cc.MinRetryInterval }
func (cc *Options) GetMaxRetryInterval() time.Duration { return cc.MaxRetryInterval }
func (cc *Options) GetDriftFactor() float64            { return cc.DriftFactor }
func (cc *Options) GetTimeoutFactor() float64          { return cc.TimeoutFactor }
func (cc *Options) GetExpiration() time.Duration       { return cc.Expiration }
func (cc *Options) GetPrefix() string                  { return cc.Prefix }
func (cc *Options) GetAutoRenew() bool                 { return cc.AutoRenew }

// OptionsVisitor visitor interface for Options
type OptionsVisitor interface {
	GetRetryTimes() int
	GetMinRetryInterval() time.Duration
	GetMaxRetryInterval() time.Duration
	GetDriftFactor() float64
	GetTimeoutFactor() float64
	GetExpiration() time.Duration
	GetPrefix() string
	GetAutoRenew() bool
}

// OptionsInterface visitor + ApplyOption interface for Options
type OptionsInterface interface {
	OptionsVisitor
	ApplyOption(...Option)
}
